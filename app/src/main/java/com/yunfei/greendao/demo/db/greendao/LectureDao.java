package com.yunfei.greendao.demo.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.yunfei.greendao.demo.bean.Lecture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LECTURE".
*/
public class LectureDao extends AbstractDao<Lecture, String> {

    public static final String TABLENAME = "LECTURE";

    /**
     * Properties of entity Lecture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LectureSort = new Property(0, String.class, "lectureSort", false, "LECTURE_SORT");
        public final static Property LectureName = new Property(1, String.class, "lectureName", false, "LECTURE_NAME");
        public final static Property LectureNo = new Property(2, String.class, "lectureNo", false, "LECTURE_NO");
        public final static Property LectureId = new Property(3, String.class, "lectureId", true, "LECTURE_ID");
        public final static Property ChapterId = new Property(4, String.class, "chapterId", false, "CHAPTER_ID");
    }

    private Query<Lecture> chapter_LectureListQuery;

    public LectureDao(DaoConfig config) {
        super(config);
    }
    
    public LectureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LECTURE\" (" + //
                "\"LECTURE_SORT\" TEXT," + // 0: lectureSort
                "\"LECTURE_NAME\" TEXT," + // 1: lectureName
                "\"LECTURE_NO\" TEXT," + // 2: lectureNo
                "\"LECTURE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 3: lectureId
                "\"CHAPTER_ID\" TEXT);"); // 4: chapterId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LECTURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lecture entity) {
        stmt.clearBindings();
 
        String lectureSort = entity.getLectureSort();
        if (lectureSort != null) {
            stmt.bindString(1, lectureSort);
        }
 
        String lectureName = entity.getLectureName();
        if (lectureName != null) {
            stmt.bindString(2, lectureName);
        }
 
        String lectureNo = entity.getLectureNo();
        if (lectureNo != null) {
            stmt.bindString(3, lectureNo);
        }
 
        String lectureId = entity.getLectureId();
        if (lectureId != null) {
            stmt.bindString(4, lectureId);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(5, chapterId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lecture entity) {
        stmt.clearBindings();
 
        String lectureSort = entity.getLectureSort();
        if (lectureSort != null) {
            stmt.bindString(1, lectureSort);
        }
 
        String lectureName = entity.getLectureName();
        if (lectureName != null) {
            stmt.bindString(2, lectureName);
        }
 
        String lectureNo = entity.getLectureNo();
        if (lectureNo != null) {
            stmt.bindString(3, lectureNo);
        }
 
        String lectureId = entity.getLectureId();
        if (lectureId != null) {
            stmt.bindString(4, lectureId);
        }
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(5, chapterId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Lecture readEntity(Cursor cursor, int offset) {
        Lecture entity = new Lecture( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // lectureSort
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lectureName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lectureNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lectureId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // chapterId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lecture entity, int offset) {
        entity.setLectureSort(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLectureName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLectureNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLectureId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Lecture entity, long rowId) {
        return entity.getLectureId();
    }
    
    @Override
    public String getKey(Lecture entity) {
        if(entity != null) {
            return entity.getLectureId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lecture entity) {
        return entity.getLectureId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "lectureList" to-many relationship of Chapter. */
    public List<Lecture> _queryChapter_LectureList(String chapterId) {
        synchronized (this) {
            if (chapter_LectureListQuery == null) {
                QueryBuilder<Lecture> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChapterId.eq(null));
                queryBuilder.orderRaw("T.'LECTURE_SORT' DESC");
                chapter_LectureListQuery = queryBuilder.build();
            }
        }
        Query<Lecture> query = chapter_LectureListQuery.forCurrentThread();
        query.setParameter(0, chapterId);
        return query.list();
    }

}
