package com.yunfei.greendao.demo.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.yunfei.greendao.demo.bean.Chapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER".
*/
public class ChapterDao extends AbstractDao<Chapter, String> {

    public static final String TABLENAME = "CHAPTER";

    /**
     * Properties of entity Chapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChapterId = new Property(0, String.class, "chapterId", true, "CHAPTER_ID");
        public final static Property ChapterName = new Property(1, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property ChapterSort = new Property(2, String.class, "chapterSort", false, "CHAPTER_SORT");
        public final static Property CourseId = new Property(3, String.class, "courseId", false, "COURSE_ID");
    }

    private DaoSession daoSession;

    private Query<Chapter> goodsCourse_ChapterListQuery;

    public ChapterDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER\" (" + //
                "\"CHAPTER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: chapterId
                "\"CHAPTER_NAME\" TEXT," + // 1: chapterName
                "\"CHAPTER_SORT\" TEXT," + // 2: chapterSort
                "\"COURSE_ID\" TEXT);"); // 3: courseId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(1, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(2, chapterName);
        }
 
        String chapterSort = entity.getChapterSort();
        if (chapterSort != null) {
            stmt.bindString(3, chapterSort);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(4, courseId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String chapterId = entity.getChapterId();
        if (chapterId != null) {
            stmt.bindString(1, chapterId);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(2, chapterName);
        }
 
        String chapterSort = entity.getChapterSort();
        if (chapterSort != null) {
            stmt.bindString(3, chapterSort);
        }
 
        String courseId = entity.getCourseId();
        if (courseId != null) {
            stmt.bindString(4, courseId);
        }
    }

    @Override
    protected final void attachEntity(Chapter entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Chapter readEntity(Cursor cursor, int offset) {
        Chapter entity = new Chapter( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chapterId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chapterName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterSort
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // courseId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapter entity, int offset) {
        entity.setChapterId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapterName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterSort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCourseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Chapter entity, long rowId) {
        return entity.getChapterId();
    }
    
    @Override
    public String getKey(Chapter entity) {
        if(entity != null) {
            return entity.getChapterId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chapter entity) {
        return entity.getChapterId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chapterList" to-many relationship of GoodsCourse. */
    public List<Chapter> _queryGoodsCourse_ChapterList(String courseId) {
        synchronized (this) {
            if (goodsCourse_ChapterListQuery == null) {
                QueryBuilder<Chapter> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CourseId.eq(null));
                queryBuilder.orderRaw("T.'CHAPTER_SORT' DESC");
                goodsCourse_ChapterListQuery = queryBuilder.build();
            }
        }
        Query<Chapter> query = goodsCourse_ChapterListQuery.forCurrentThread();
        query.setParameter(0, courseId);
        return query.list();
    }

}
